name: run_with_e2e_account
description: Runs commands with e2e test account
inputs:
  run:
    description: Script to run
    required: true
  shell:
    description: Shell
    required: false
  node_version:
    description: node version used to configure environment with
    required: true
  e2e_test_accounts:
    description: Serialized JSON array of strings with account numbers
    required: true
  aws_region:
    description: AWS region. If not provided random will be selected
    required: false
  link_cli:
    description: Whether should link Gen2 CLI globally
    default: false
  fresh_build:
    description: Whether should build from scratch
    default: false
  cdk-lib-version:
    required: true
  attempt_timeout_minutes:
    description: Timeout for each attempt in minutes
    required: false
    default: '25'
  retry_attempts:
    description: Number of retry attempts for the main script
    required: false
    default: '5'
  retry_delay:
    description: Delay between retry attempts in seconds
    required: false
    default: '300'
runs:
  using: composite
  steps:
    - name: Setup Node.js
      uses: ./.github/actions/setup_node
      with:
        node-version: ${{ inputs.node_version }}
    - name: Restore Build Cache
      if: inputs.fresh_build != 'true'
      uses: ./.github/actions/restore_build_cache
      with:
        cdk-lib-version: ${{ inputs.cdk-lib-version }}
        node-version: ${{ inputs.node_version }}
    - name: Build With Cache
      if: inputs.fresh_build == 'true'
      uses: ./.github/actions/build_with_cache
      with:
        cdk-lib-version: ${{ inputs.cdk-lib-version }}
        node-version: ${{ inputs.node_version }}
    - name: Link CLI
      if: inputs.link_cli == 'true'
      shell: bash
      run: cd packages/cli && npm link
    - name: Select E2E test account
      uses: ./.github/actions/select_e2e_account
      id: selectE2EAccount
      with:
        e2e_test_accounts: ${{ inputs.e2e_test_accounts }}
    - name: Select region
      id: selectE2ERegion
      shell: bash
      run: |
        if [ -z "${{ inputs.aws_region }}" ]; then
          regions=("us-west-2" "us-east-1" "ca-central-1" "eu-central-1")
          rand=$[$RANDOM % ${#regions[@]}]
          selected_aws_region=${regions[$rand]}
        else
          selected_aws_region="${{ inputs.aws_region }}"
        fi
        echo "Selected AWS Region is $selected_aws_region"
        echo "selected_aws_region=$selected_aws_region" >> "$GITHUB_OUTPUT"
    - name: Configure test tooling credentials
      uses: ./.github/actions/setup_profile
      with:
        role-to-assume: ${{ steps.selectE2EAccount.outputs.e2e_test_tooling_role }}
        aws-region: ${{ steps.selectE2ERegion.outputs.selected_aws_region }}
        profile-name: e2e-tooling
    - name: Configure test execution credentials
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # version 4.0.2
      with:
        role-to-assume: ${{ steps.selectE2EAccount.outputs.e2e_execution_role }}
        aws-region: ${{ steps.selectE2ERegion.outputs.selected_aws_region }}
    - name: Run script with retry
      shell: bash
      run: |
        set -e

        # Set default shell if not provided
        SHELL_CMD="${{ inputs.shell }}"
        if [ -z "$SHELL_CMD" ]; then
          SHELL_CMD="bash"
        fi

        # Retry logic
        RETRY_ATTEMPTS=${{ inputs.retry_attempts }}
        RETRY_DELAY=${{ inputs.retry_delay }}
        TIMEOUT_MINUTES=${{ inputs.attempt_timeout_minutes }}
        ATTEMPT=1

        # Function to run command with timeout (cross-platform)
        run_with_timeout() {
          local cmd="$1"
          local shell_type="$2"
          local timeout_seconds=$((TIMEOUT_MINUTES * 60))
          
          echo "Running command with timeout of $TIMEOUT_MINUTES minutes ($timeout_seconds seconds)"
          
          # Create a temporary file for the exit code
          local temp_exit_code=$(mktemp)
          
          # Run the command in background
          if [ "$shell_type" = "bash" ]; then
            (bash -c "$cmd"; echo $? > "$temp_exit_code") &
          elif [ "$shell_type" = "pwsh" ]; then
            (pwsh -c "$cmd"; echo $? > "$temp_exit_code") &
          else
            # Default to bash for other shells
            (bash -c "$cmd"; echo $? > "$temp_exit_code") &
          fi
          
          local cmd_pid=$!
          local elapsed=0
          local sleep_interval=5
          
          # Monitor the process
          while [ $elapsed -lt $timeout_seconds ]; do
            if ! kill -0 $cmd_pid 2>/dev/null; then
              # Process has finished
              wait $cmd_pid 2>/dev/null
              local exit_code
              if [ -f "$temp_exit_code" ]; then
                exit_code=$(cat "$temp_exit_code")
                rm -f "$temp_exit_code"
              else
                exit_code=$?
              fi
              return $exit_code
            fi
            
            sleep $sleep_interval
            elapsed=$((elapsed + sleep_interval))
          done
          
          # Timeout reached, kill the process
          echo "Timeout reached, terminating process..."
          kill -TERM $cmd_pid 2>/dev/null
          sleep 2
          kill -KILL $cmd_pid 2>/dev/null
          wait $cmd_pid 2>/dev/null
          rm -f "$temp_exit_code"
          return 124  # Standard timeout exit code
        }

        while [ $ATTEMPT -le $RETRY_ATTEMPTS ]; do
          echo "Attempt $ATTEMPT of $RETRY_ATTEMPTS"
          
          if run_with_timeout '${{ inputs.run }}' "$SHELL_CMD"; then
            echo "Script succeeded on attempt $ATTEMPT"
            exit 0
          else
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 124 ]; then
              echo "Script timed out after $TIMEOUT_MINUTES minutes on attempt $ATTEMPT"
            else
              echo "Script failed with exit code $EXIT_CODE on attempt $ATTEMPT"
            fi
          fi
          
          if [ $ATTEMPT -lt $RETRY_ATTEMPTS ]; then
            echo "Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
          else
            echo "Script failed after $RETRY_ATTEMPTS attempts"
            exit 1
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
        done
      env:
        AWS_REGION: ${{ steps.selectE2ERegion.outputs.selected_aws_region }}
        AMPLIFY_BACKEND_TESTS_E2E_EXECUTION_ROLE_ARN: ${{ steps.selectE2EAccount.outputs.e2e_execution_role }}
