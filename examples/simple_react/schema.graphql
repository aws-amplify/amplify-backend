schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ModelPostConnection @aws_api_key @aws_iam {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

type Mutation {
  createPost(condition: ModelPostConditionInput, input: CreatePostInput!): Post @aws_api_key @aws_iam
  deletePost(condition: ModelPostConditionInput, input: DeletePostInput!): Post @aws_api_key @aws_iam
  updatePost(condition: ModelPostConditionInput, input: UpdatePostInput!): Post @aws_api_key @aws_iam
}

type Post @aws_api_key @aws_iam {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  body: String
  createdAt: AWSDateTime!
  id: ID!
  title: String
  updatedAt: AWSDateTime!
}

type Query {
  getPost(id: ID!): Post @aws_api_key @aws_iam
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_iam
  syncPosts(filter: ModelPostFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_iam
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_api_key @aws_iam @aws_subscribe(mutations : ["createPost"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_api_key @aws_iam @aws_subscribe(mutations : ["deletePost"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_api_key @aws_iam @aws_subscribe(mutations : ["updatePost"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreatePostInput {
  _version: Int
  body: String
  id: ID
  title: String
}

input DeletePostInput {
  _version: Int
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelPostConditionInput {
  _deleted: ModelBooleanInput
  and: [ModelPostConditionInput]
  body: ModelStringInput
  not: ModelPostConditionInput
  or: [ModelPostConditionInput]
  title: ModelStringInput
}

input ModelPostFilterInput {
  _deleted: ModelBooleanInput
  and: [ModelPostFilterInput]
  body: ModelStringInput
  id: ModelIDInput
  not: ModelPostFilterInput
  or: [ModelPostFilterInput]
  title: ModelStringInput
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
  eq: Boolean
  ne: Boolean
}

input ModelSubscriptionFloatInput {
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
  ne: Float
  notIn: [Float]
}

input ModelSubscriptionIDInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  in: [ID]
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
  ne: Int
  notIn: [Int]
}

input ModelSubscriptionPostFilterInput {
  _deleted: ModelBooleanInput
  and: [ModelSubscriptionPostFilterInput]
  body: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  or: [ModelSubscriptionPostFilterInput]
  title: ModelSubscriptionStringInput
}

input ModelSubscriptionStringInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  ne: String
  notContains: String
  notIn: [String]
}

input UpdatePostInput {
  _version: Int
  body: String
  id: ID!
  title: String
}
