/**
 * This is a requirement for generating the introspection schema until the data team's work on model generation is complete. This file will be made obsolete by their work
 */
export const directives =
  'directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION\n\ndirective @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION\n\ndirective @aws_api_key on FIELD_DEFINITION | OBJECT\n\ndirective @aws_iam on FIELD_DEFINITION | OBJECT\n\ndirective @aws_oidc on FIELD_DEFINITION | OBJECT\n\ndirective @aws_cognito_user_pools(cognito_groups: [String!]) on FIELD_DEFINITION | OBJECT\n\ndirective @aws_lambda on FIELD_DEFINITION | OBJECT\n\ndirective @deprecated(reason: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ENUM | ENUM_VALUE\n\ndirective @model(queries: ModelQueryMap, mutations: ModelMutationMap, subscriptions: ModelSubscriptionMap, timestamps: TimestampConfiguration) on OBJECT\ninput ModelMutationMap {\n  create: String\n  update: String\n  delete: String\n}\ninput ModelQueryMap {\n  get: String\n  list: String\n}\ninput ModelSubscriptionMap {\n  onCreate: [String]\n  onUpdate: [String]\n  onDelete: [String]\n  level: ModelSubscriptionLevel\n}\nenum ModelSubscriptionLevel {\n  off\n  public\n  on\n}\ninput TimestampConfiguration {\n  createdAt: String\n  updatedAt: String\n}\ndirective @function(name: String!, region: String, accountId: String) repeatable on FIELD_DEFINITION\ndirective @http(method: HttpMethod = GET, url: String!, headers: [HttpHeader] = []) on FIELD_DEFINITION\nenum HttpMethod {\n  GET\n  POST\n  PUT\n  DELETE\n  PATCH\n}\ninput HttpHeader {\n  key: String\n  value: String\n}\ndirective @predictions(actions: [PredictionsActions!]!) on FIELD_DEFINITION\nenum PredictionsActions {\n  identifyText\n  identifyLabels\n  convertTextToSpeech\n  translateText\n}\ndirective @primaryKey(sortKeyFields: [String]) on FIELD_DEFINITION\ndirective @index(name: String, sortKeyFields: [String], queryField: String) repeatable on FIELD_DEFINITION\ndirective @hasMany(indexName: String, fields: [String!], limit: Int = 100) on FIELD_DEFINITION\ndirective @hasOne(fields: [String!]) on FIELD_DEFINITION\ndirective @manyToMany(relationName: String!, limit: Int = 100) on FIELD_DEFINITION\ndirective @belongsTo(fields: [String!]) on FIELD_DEFINITION\ndirective @default(value: String!) on FIELD_DEFINITION\ndirective @auth(rules: [AuthRule!]!) on OBJECT | FIELD_DEFINITION\ninput AuthRule {\n  allow: AuthStrategy!\n  provider: AuthProvider\n  identityClaim: String\n  groupClaim: String\n  ownerField: String\n  groupsField: String\n  groups: [String]\n  operations: [ModelOperation]\n}\nenum AuthStrategy {\n  owner\n  groups\n  private\n  public\n  custom\n}\nenum AuthProvider {\n  apiKey\n  iam\n  oidc\n  userPools\n  function\n}\nenum ModelOperation {\n  create\n  update\n  delete\n  read\n  list\n  get\n  sync\n  listen\n  search\n}\ndirective @mapsTo(name: String!) on OBJECT\ndirective @searchable(queries: SearchableQueryMap) on OBJECT\ninput SearchableQueryMap {\n  search: String\n}';
