import {
  AuthResources,
  BackendOutputStorageStrategy,
  BackendSecretResolver,
  ConstructContainerEntryGenerator,
  ConstructFactory,
  ConstructFactoryGetInstanceProps,
  ResourceProvider,
} from '@aws-amplify/plugin-types';
import { AmplifyAuth } from './construct.js';
import { Construct } from 'constructs';
import { AuthOutput } from '@aws-amplify/backend-output-schemas';
import path from 'path';
import { authOutputKey } from '@aws-amplify/backend-output-schemas';
import { Stack, aws_cognito, aws_iam } from 'aws-cdk-lib';
import { StackMetadataBackendOutputStorageStrategy } from '@aws-amplify/backend-output-storage';
import { CfnIdentityPool } from 'aws-cdk-lib/aws-cognito';

type ReferenceAuthProps = {
  userPoolArn: string;
  webClientId: string;
  nativeClientArn: string;
  identityPoolArn: string;
  authRoleArn: string;
  unauthRoleArn: string;
  outputStorageStrategy?: BackendOutputStorageStrategy<AuthOutput>;
};
export type AmplifyReferenceAuthFactoryProps = Omit<
  ReferenceAuthProps,
  'outputStorageStrategy'
>;
class AmplifyReferenceAuth extends Construct {
  /**
   * The resources generated by the construct.
   */
  readonly resources: AuthResources;

  constructor(scope: Construct, id: string, props: ReferenceAuthProps) {
    super(scope, id);
    this.resources.userPool = aws_cognito.UserPool.fromUserPoolArn(
      scope,
      'UserPool',
      props.userPoolArn
    );
    this.resources.userPoolClient =
      aws_cognito.UserPoolClient.fromUserPoolClientId(
        scope,
        'UserPoolClient',
        props.webClientId
      );
    this.resources.authenticatedUserIamRole = aws_iam.Role.fromRoleArn(
      scope,
      'AuthRole',
      props.authRoleArn
    );

    // can't do the same for identity pools
    this.resources.cfnResources.identityPool = CfnIdentityPool.
  }

  /**
   * Stores auth output using the provided strategy
   */
  private storeOutput = (
    outputStorageStrategy: BackendOutputStorageStrategy<AuthOutput> = new StackMetadataBackendOutputStorageStrategy(
      Stack.of(this)
    )
  ): void => {
    const output: AuthOutput['payload'] = {
      userPoolId: this.resources.userPool.userPoolId,
      webClientId: this.resources.userPoolClient.userPoolClientId,
      identityPoolId: this.resources.cfnResources.identityPool.ref,
      authRegion: Stack.of(this).region,
    };
    outputStorageStrategy.addBackendOutputEntry(authOutputKey, {
      version: '1',
      payload: output,
    });
  };
}
class AmplifyReferenceAuthGenerator
  implements ConstructContainerEntryGenerator
{
  readonly resourceGroupName = 'auth';
  private readonly defaultName = 'amplifyAuth';

  constructor(
    private readonly props: AmplifyReferenceAuthFactoryProps,
    private readonly getInstanceProps: ConstructFactoryGetInstanceProps
  ) {}

  generateContainerEntry = (
    scope: Construct,
    backendSecretResolver: BackendSecretResolver
  ) => {
    const authProps: ReferenceAuthProps = {
      ...this.props,
      outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
    };

    const authConstruct = new AmplifyReferenceAuth(
      scope,
      this.defaultName,
      authProps
    );
    return authConstruct;
  };
}
class AmplifyReferenceAuthFactory
  implements ConstructFactory<AmplifyAuth & ResourceProvider<AuthResources>>
{
  readonly provides = 'AuthResources';
  private generator: ConstructContainerEntryGenerator;
  /**
   * Set the properties that will be used to initialize AmplifyAuth
   */
  constructor(
    private readonly props: AmplifyReferenceAuthFactoryProps,
    private readonly importStack = new Error().stack
  ) {}

  /**
   * Get a singleton instance of AmplifyAuth
   */
  getInstance = (
    getInstanceProps: ConstructFactoryGetInstanceProps
  ): AmplifyAuth => {
    const { constructContainer, importPathVerifier } = getInstanceProps;
    importPathVerifier?.verify(
      this.importStack,
      path.join('amplify', 'auth', 'resource'),
      'Amplify Auth must be defined in amplify/auth/resource.ts'
    );
    if (!this.generator) {
      this.generator = new AmplifyReferenceAuthGenerator(
        this.props,
        getInstanceProps
      );
    }
    return constructContainer.getOrCompute(this.generator) as AmplifyAuth;
  };
}
