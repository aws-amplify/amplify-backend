// To parse this data:
//
//   import { Convert, ConfigTypesV0 } from "./file";
//
//   const configTypesV0 = Convert.toConfigTypesV0(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.

/**
 * outputs generated by AWS Amplify (Gen 2) backends
 */
export type ConfigTypesV2 = {
  /**
   * Version of this schema
   */
  _version: '2';
  /**
   * Outputs generated from defineAuth
   */
  auth?: Auth;
  /**
   * Outputs generated from defineAuth
   */
  custom?: { [key: string]: any };
  /**
   * Outputs generated from defineData
   */
  data?: Data;
  /**
   * Outputs generated from defineStorage
   */
  storage?: Storage;
};

/**
 * Outputs generated from defineAuth
 */
export type Auth = {
  aws_region?: AwsRegion;
  /**
   * Cognito Identity Pool ID
   */
  identity_pool_id?: string;
  mfa_configuration?: MfaConfiguration;
  mfa_methods?: MfaMethod[];
  oauth_domain?: string;
  oauth_redirect_sign_in?: string;
  oauth_redirect_sign_out?: string;
  oauth_response_type?: OauthResponseType;
  oauth_scope?: string[];
  password_policy_characters?: PasswordPolicyCharacter[];
  password_policy_min_length?: number;
  social_providers?: string[];
  /**
   * Cognito User Pool Client ID
   */
  user_pool_client_id?: string;
  /**
   * Cognito User Pool ID
   */
  user_pool_id?: string;
  user_sign_up_attributes?: string[];
  user_username_attributes?: UserUsernameAttribute[];
  user_verification_mechanisms?: UserVerificationMechanism[];
};

export enum AwsRegion {
  UsEast1 = 'us-east-1',
  UsEast2 = 'us-east-2',
  UsWest1 = 'us-west-1',
  UsWest2 = 'us-west-2',
}

export enum MfaConfiguration {
  None = 'NONE',
  Optional = 'OPTIONAL',
  Required = 'REQUIRED',
}

export enum MfaMethod {
  SMS = 'SMS',
  Totp = 'TOTP',
}

export enum OauthResponseType {
  Code = 'code',
  Token = 'token',
}

export enum PasswordPolicyCharacter {
  RequiresLowercase = 'REQUIRES_LOWERCASE',
  RequiresNumbers = 'REQUIRES_NUMBERS',
  RequiresSymbols = 'REQUIRES_SYMBOLS',
  RequiresUppercase = 'REQUIRES_UPPERCASE',
}

export enum UserUsernameAttribute {
  Email = 'email',
  Phone = 'phone',
  PreferredUsername = 'preferred_username',
  Username = 'username',
}

export enum UserVerificationMechanism {
  Email = 'email',
  Phone = 'phone',
}

/**
 * Outputs generated from defineData
 */
export type Data = {
  api_key?: string;
  authorization_types?: AuthorizationType[];
  aws_region?: AwsRegion;
  default_authorization_type?: string;
  /**
   * generated model introspection schema for use with generateClient
   */
  model_introspection?: { [key: string]: any };
  /**
   * AppSync endpoint URL
   */
  url?: string;
};

export enum AuthorizationType {
  APIKey = 'API_KEY',
  AmazonCognitoUserPools = 'AMAZON_COGNITO_USER_POOLS',
  AwsIam = 'AWS_IAM',
  AwsLambda = 'AWS_LAMBDA',
  OpenidConnect = 'OPENID_CONNECT',
}

/**
 * Outputs generated from defineStorage
 */
export type Storage = {
  buckets?: Bucket[];
};

export type Bucket = {
  aws_region?: AwsRegion;
  name?: string;
  prefixes?: string[];
  [property: string]: any;
};

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
/**
 *
 */
export class Convert {
  /**
   *
   */
  public static toConfigTypesV0(json: string): ConfigTypesV2 {
    return cast(JSON.parse(json), r('ConfigTypesV0'));
  }

  /**
   *
   */
  public static configTypesV0ToJson(value: ConfigTypesV2): string {
    return JSON.stringify(uncast(value, r('ConfigTypesV0')), null, 2);
  }
}

function invalidValue(typ: any, val: any, key: any, parent: any = ''): never {
  const prettyTyp = prettyTypeName(typ);
  const parentText = parent ? ` on ${parent}` : '';
  const keyText = key ? ` for key "${key}"` : '';
  throw Error(
    `Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(
      val
    )}`
  );
}

function prettyTypeName(typ: any): string {
  if (Array.isArray(typ)) {
    if (typ.length === 2 && typ[0] === undefined) {
      return `an optional ${prettyTypeName(typ[1])}`;
    }
    return `one of [${typ
      .map((a) => {
        return prettyTypeName(a);
      })
      .join(', ')}]`;
  } else if (typeof typ === 'object' && typ.literal !== undefined) {
    return typ.literal;
  }
  return typeof typ;
}

function jsonToJSProps(typ: any): any {
  if (typ.jsonToJS === undefined) {
    const map: any = {};
    typ.props.forEach((p: any) => (map[p.json] = { key: p.js, typ: p.typ }));
    typ.jsonToJS = map;
  }
  return typ.jsonToJS;
}

function jsToJSONProps(typ: any): any {
  if (typ.jsToJSON === undefined) {
    const map: any = {};
    typ.props.forEach((p: any) => (map[p.js] = { key: p.json, typ: p.typ }));
    typ.jsToJSON = map;
  }
  return typ.jsToJSON;
}

function transform(
  val: any,
  typ: any,
  getProps: any,
  key: any = '',
  parent: any = ''
): any {
  function transformPrimitive(typ: string, val: any): any {
    if (typeof typ === typeof val) return val;
    return invalidValue(typ, val, key, parent);
  }

  function transformUnion(typs: any[], val: any): any {
    // val must validate against one typ in typs
    const l = typs.length;
    for (let i = 0; i < l; i++) {
      const typ = typs[i];
      try {
        return transform(val, typ, getProps);
      } catch (_) {}
    }
    return invalidValue(typs, val, key, parent);
  }

  function transformEnum(cases: string[], val: any): any {
    if (cases.indexOf(val) !== -1) return val;
    return invalidValue(
      cases.map((a) => {
        return l(a);
      }),
      val,
      key,
      parent
    );
  }

  function transformArray(typ: any, val: any): any {
    // val must be an array with no invalid elements
    if (!Array.isArray(val)) return invalidValue(l('array'), val, key, parent);
    return val.map((el) => transform(el, typ, getProps));
  }

  function transformDate(val: any): any {
    if (val === null) {
      return null;
    }
    const d = new Date(val);
    if (isNaN(d.valueOf())) {
      return invalidValue(l('Date'), val, key, parent);
    }
    return d;
  }

  function transformObject(
    props: { [k: string]: any },
    additional: any,
    val: any
  ): any {
    if (val === null || typeof val !== 'object' || Array.isArray(val)) {
      return invalidValue(l(ref || 'object'), val, key, parent);
    }
    const result: any = {};
    Object.getOwnPropertyNames(props).forEach((key) => {
      const prop = props[key];
      const v = Object.prototype.hasOwnProperty.call(val, key)
        ? val[key]
        : undefined;
      result[prop.key] = transform(v, prop.typ, getProps, key, ref);
    });
    Object.getOwnPropertyNames(val).forEach((key) => {
      if (!Object.prototype.hasOwnProperty.call(props, key)) {
        result[key] = transform(val[key], additional, getProps, key, ref);
      }
    });
    return result;
  }

  if (typ === 'any') return val;
  if (typ === null) {
    if (val === null) return val;
    return invalidValue(typ, val, key, parent);
  }
  if (typ === false) return invalidValue(typ, val, key, parent);
  let ref: any = undefined;
  while (typeof typ === 'object' && typ.ref !== undefined) {
    ref = typ.ref;
    typ = typeMap[typ.ref];
  }
  if (Array.isArray(typ)) return transformEnum(typ, val);
  if (typeof typ === 'object') {
    return typ.hasOwnProperty('unionMembers')
      ? transformUnion(typ.unionMembers, val)
      : typ.hasOwnProperty('arrayItems')
      ? transformArray(typ.arrayItems, val)
      : typ.hasOwnProperty('props')
      ? transformObject(getProps(typ), typ.additional, val)
      : invalidValue(typ, val, key, parent);
  }
  // Numbers can be parsed by Date but shouldn't be.
  if (typ === Date && typeof val !== 'number') return transformDate(val);
  return transformPrimitive(typ, val);
}

function cast<T>(val: any, typ: any): T {
  return transform(val, typ, jsonToJSProps);
}

function uncast<T>(val: T, typ: any): any {
  return transform(val, typ, jsToJSONProps);
}

function l(typ: any) {
  return { literal: typ };
}

function a(typ: any) {
  return { arrayItems: typ };
}

function u(...typs: any[]) {
  return { unionMembers: typs };
}

function o(props: any[], additional: any) {
  return { props, additional };
}

function m(additional: any) {
  return { props: [], additional };
}

function r(name: string) {
  return { ref: name };
}

const typeMap: any = {
  ConfigTypesV0: o(
    [
      { json: '_version', js: '_version', typ: u(undefined, r('Version')) },
      { json: 'auth', js: 'auth', typ: u(undefined, r('Auth')) },
      { json: 'custom', js: 'custom', typ: u(undefined, m('any')) },
      { json: 'data', js: 'data', typ: u(undefined, r('Data')) },
      { json: 'storage', js: 'storage', typ: u(undefined, r('Storage')) },
    ],
    false
  ),
  Auth: o(
    [
      {
        json: 'aws_region',
        js: 'aws_region',
        typ: u(undefined, r('AwsRegion')),
      },
      {
        json: 'identity_pool_id',
        js: 'identity_pool_id',
        typ: u(undefined, ''),
      },
      {
        json: 'mfa_configuration',
        js: 'mfa_configuration',
        typ: u(undefined, r('MfaConfiguration')),
      },
      {
        json: 'mfa_methods',
        js: 'mfa_methods',
        typ: u(undefined, a(r('MfaMethod'))),
      },
      { json: 'oauth_domain', js: 'oauth_domain', typ: u(undefined, '') },
      {
        json: 'oauth_redirect_sign_in',
        js: 'oauth_redirect_sign_in',
        typ: u(undefined, ''),
      },
      {
        json: 'oauth_redirect_sign_out',
        js: 'oauth_redirect_sign_out',
        typ: u(undefined, ''),
      },
      {
        json: 'oauth_response_type',
        js: 'oauth_response_type',
        typ: u(undefined, r('OauthResponseType')),
      },
      { json: 'oauth_scope', js: 'oauth_scope', typ: u(undefined, a('')) },
      {
        json: 'password_policy_characters',
        js: 'password_policy_characters',
        typ: u(undefined, a(r('PasswordPolicyCharacter'))),
      },
      {
        json: 'password_policy_min_length',
        js: 'password_policy_min_length',
        typ: u(undefined, 3.14),
      },
      {
        json: 'social_providers',
        js: 'social_providers',
        typ: u(undefined, a('')),
      },
      {
        json: 'user_pool_client_id',
        js: 'user_pool_client_id',
        typ: u(undefined, ''),
      },
      { json: 'user_pool_id', js: 'user_pool_id', typ: u(undefined, '') },
      {
        json: 'user_sign_up_attributes',
        js: 'user_sign_up_attributes',
        typ: u(undefined, a('')),
      },
      {
        json: 'user_username_attributes',
        js: 'user_username_attributes',
        typ: u(undefined, a(r('UserUsernameAttribute'))),
      },
      {
        json: 'user_verification_mechanisms',
        js: 'user_verification_mechanisms',
        typ: u(undefined, a(r('UserVerificationMechanism'))),
      },
    ],
    false
  ),
  Data: o(
    [
      { json: 'api_key', js: 'api_key', typ: u(undefined, '') },
      {
        json: 'authorization_types',
        js: 'authorization_types',
        typ: u(undefined, a(r('AuthorizationType'))),
      },
      {
        json: 'aws_region',
        js: 'aws_region',
        typ: u(undefined, r('AwsRegion')),
      },
      {
        json: 'default_authorization_type',
        js: 'default_authorization_type',
        typ: u(undefined, ''),
      },
      {
        json: 'model_introspection',
        js: 'model_introspection',
        typ: u(undefined, m('any')),
      },
      { json: 'url', js: 'url', typ: u(undefined, '') },
    ],
    false
  ),
  Storage: o(
    [{ json: 'buckets', js: 'buckets', typ: u(undefined, a(r('Bucket'))) }],
    false
  ),
  Bucket: o(
    [
      {
        json: 'aws_region',
        js: 'aws_region',
        typ: u(undefined, r('AwsRegion')),
      },
      { json: 'name', js: 'name', typ: u(undefined, '') },
      { json: 'prefixes', js: 'prefixes', typ: u(undefined, a('')) },
    ],
    'any'
  ),
  Version: ['1'],
  AwsRegion: ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2'],
  MfaConfiguration: ['NONE', 'OPTIONAL', 'REQUIRED'],
  MfaMethod: ['SMS', 'TOTP'],
  OauthResponseType: ['code', 'token'],
  PasswordPolicyCharacter: [
    'REQUIRES_LOWERCASE',
    'REQUIRES_NUMBERS',
    'REQUIRES_SYMBOLS',
    'REQUIRES_UPPERCASE',
  ],
  UserUsernameAttribute: ['email', 'phone', 'preferred_username', 'username'],
  UserVerificationMechanism: ['email', 'phone'],
  AuthorizationType: [
    'API_KEY',
    'AMAZON_COGNITO_USER_POOLS',
    'AWS_IAM',
    'AWS_LAMBDA',
    'OPENID_CONNECT',
  ],
};
