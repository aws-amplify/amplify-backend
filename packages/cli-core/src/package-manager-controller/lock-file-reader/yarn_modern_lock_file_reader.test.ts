import assert from 'assert';
import fsp from 'fs/promises';
import { afterEach, describe, it, mock } from 'node:test';
import path from 'path';
import { YarnModernLockFileReader } from './yarn_modern_lock_file_reader.js';

void describe('YarnModernLockFileReader', () => {
  const fspReadFileMock = mock.method(
    fsp,
    'readFile',
    () => `# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 8
  cacheKey: 10c0

"@test_dep@npm:^1.0.0":
  version: 1.2.3
  resolution: "@test_dep@npm:1.2.3"
  dependencies:
    "@sub_dep_1": "npm:^0.3.5"
    "sub_dep_2": "npm:^0.3.24"
  checksum: some-checksum
  languageName: node
  linkType: hard

"some_other_dep@npm:12.13.14":
  version: 12.13.14
  resolution: "some_other_dep@npm:12.13.14"
  dependencies:
    sub-dep_3: "npm:~2.0.1"
  checksum: some-other-checksum
  languageName: node
  linkType: hard`
  );
  const yarnModernLockFileReader = new YarnModernLockFileReader();

  afterEach(() => {
    fspReadFileMock.mock.resetCalls();
  });

  void it('can get lock file contents from cwd', async () => {
    const lockFileContents =
      await yarnModernLockFileReader.getLockFileContentsFromCwd();
    const expectedLockFileContents = {
      dependencies: [
        {
          name: '@test_dep',
          version: '1.2.3',
        },
        {
          name: 'some_other_dep',
          version: '12.13.14',
        },
      ],
    };
    assert.deepEqual(lockFileContents, expectedLockFileContents);
    assert.strictEqual(
      fspReadFileMock.mock.calls[0].arguments[0],
      path.resolve(process.cwd(), 'yarn.lock')
    );
    assert.strictEqual(fspReadFileMock.mock.callCount(), 1);
  });

  void it('returns undefined when yarn.lock is not present or parse-able', async () => {
    fspReadFileMock.mock.mockImplementationOnce(() =>
      Promise.reject(new Error())
    );
    const lockFileContents =
      await yarnModernLockFileReader.getLockFileContentsFromCwd();
    assert.deepEqual(lockFileContents, undefined);
  });

  void it('returns empty dependency array when yarn.lock does not have dependencies', async () => {
    mock.method(
      fsp,
      'readFile',
      () => `# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 8
  cacheKey: 10c0

"testapp@workspace:.":
  version: 0.0.0-use.local
  resolution: "testapp@workspace:."
  languageName: unknown
  linkType: soft
`
    );
    const lockFileContents =
      await yarnModernLockFileReader.getLockFileContentsFromCwd();
    assert.deepEqual(lockFileContents, { dependencies: [] });
  });
});
